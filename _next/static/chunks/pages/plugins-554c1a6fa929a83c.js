(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[57],{5001:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/plugins",function(){return n(3578)}])},7845:function(e,t,n){"use strict";var r=n(5893);t.Z={github:"https://github.com/katallaxie/run",docsRepositoryBase:"https://github.com/katallaxie/run/blob/main/docs/pages",titleSuffix:" \u2013 Run",nextLinks:!0,prevLinks:!0,search:!0,customSearch:null,darkMode:!0,footer:!0,footerText:"MIT ".concat((new Date).getFullYear()," \xa9 Sebastian Doell (@katallaxie)."),footerEditLink:"Edit this page on GitHub",logo:(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("svg",{children:"..."}),(0,r.jsx)("span",{children:"Run"})]})}},3578:function(e,t,n){"use strict";n.r(t);var r=n(5893),i=n(7829),o=n.n(i),s=n(3805),a=n(7845),l=(n(5675),function(e){return(0,s.withSSG)(o()({filename:"plugins.mdx",route:"/plugins",meta:{title:"Plugins"},pageMap:[{name:"index",route:"/",frontMatter:{title:"Run - A versatile task runner"}},{name:"installation",route:"/installation",frontMatter:{title:"Installation"}},{name:"meta.json",meta:{index:{title:"Introduction",type:"page",hidden:!0}}},{name:"plugins",route:"/plugins",frontMatter:{title:"Plugins"}},{name:"reference",route:"/reference",frontMatter:{title:"Reference"}},{name:"usage",route:"/usage",frontMatter:{title:"Usage"}}]},a.Z))(e)});function u(e){var t=Object.assign({h1:"h1",p:"p",code:"code",a:"a",pre:"pre"},e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{children:"Plugins"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"run"})," is highly extensible via its plugin system. It uses the ",(0,r.jsx)(t.a,{href:"https://github.com/hashicorp/go-plugin",children:"golang plugin system over RPC"})," to add any new feature imaginable and to keep the core system lightweight."]}),"\n",(0,r.jsxs)(t.p,{children:["The rpc system uses gRPC to establish the communication between the command line tool and the plugins. The ",(0,r.jsx)(t.a,{href:"https://raw.githubusercontent.com/katallaxie/run/main/pkg/proto/plugin.proto",children:"protocol"})," is expressed in Google's protocol buffers."]}),"\n",(0,r.jsxs)(t.p,{children:["A plugin is created by importing the ",(0,r.jsx)(t.code,{children:"github.com/katallaxie/run/pkg/plugin"})," and ",(0,r.jsx)(t.code,{children:"github.com/katallaxie/run/pkg/proto"})," package and implementing the ",(0,r.jsx)(t.code,{children:"proto.PluginServer"})," interface."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n\t"context"\n\t"fmt"\n\n\t"github.com/katallaxie/run/pkg/plugin"\n\t"github.com/katallaxie/run/pkg/proto"\n)\n\nfunc main() {\n\tplugin.Serve(&plugin.ServeOpts{\n\t\tGRPCPluginFunc: func() proto.PluginServer {\n\t\t\treturn &server{}\n\t\t},\n\t})\n}\n\ntype server struct {\n\tproto.UnimplementedPluginServer\n}\n\n// Start ...\nfunc (s *server) Execute(ctx context.Context, req *proto.Execute_Request) (*proto.Execute_Response, error) {\n\treturn &proto.Execute_Response{}, nil\n}\n\n// Stop ...\nfunc (s *server) Stop(ctx context.Context, req *proto.Stop_Request) (*proto.Stop_Response, error) {\n\treturn &proto.Stop_Response{}, nil\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Any set ",(0,r.jsx)(t.code,{children:"--timeout"})," is enforced by the CLI, thus plugins are stopped if the set time elapses."]})]})}t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,r.jsx)(l,Object.assign({},e,{children:(0,r.jsx)(u,e)}))}}},function(e){e.O(0,[58,774,888,179],(function(){return t=5001,e(e.s=t);var t}));var t=e.O();_N_E=t}]);